package com.ja.webproject.sitterboard_process.service;


import java.util.ArrayList;
import java.util.HashMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ja.webproject.sitterboard_process.mapper.SitterBoard_ProcessSQLMapper;
import com.ja.webproject.vo.HE_FinddogBoardVo;
import com.ja.webproject.vo.HE_MemberVo;
import com.ja.webproject.vo.HE_SitterBoardVo;
import com.ja.webproject.vo.HE_SitterBoard_ProcessVo;

@Service
public class SitterBoard_ProcessServiceImpl {

	
	@Autowired
	private SitterBoard_ProcessSQLMapper sitterBoard_ProcessSQLMapper;
	
	//==========================================================================================시터보드게시판의 신청글 클릭시==================================================
	public int checkSitterRequest(HE_SitterBoard_ProcessVo vo) {
		int result = sitterBoard_ProcessSQLMapper.checkSitterRequest(vo);
		return result;
		
	}
	
	public void sitterRequest(HE_SitterBoard_ProcessVo vo){
		
		sitterBoard_ProcessSQLMapper.sitterRequest(vo);
		
	}
	
	//========================================================================마이페이지에서 시터게시판 볼때(신청)================================================================
	
	public ArrayList<HashMap<HE_FinddogBoardVo, ArrayList<HE_SitterBoard_ProcessVo>>> sitterRequestListPage(ArrayList<HE_FinddogBoardVo> finddogList){
		
		ArrayList<HashMap<HE_FinddogBoardVo, ArrayList<HE_SitterBoard_ProcessVo>>> topList = new ArrayList<HashMap<HE_FinddogBoardVo,ArrayList<HE_SitterBoard_ProcessVo>>>();
		
		
		HashMap<HE_FinddogBoardVo,ArrayList<HE_SitterBoard_ProcessVo>> map = new HashMap<HE_FinddogBoardVo,ArrayList<HE_SitterBoard_ProcessVo>>();
		
		
		for(HE_FinddogBoardVo vo : finddogList) {
			
			
			try {
				
				ArrayList<HE_SitterBoard_ProcessVo> list= sitterBoard_ProcessSQLMapper.sitterRequestListPage(vo);
				if(list.size() == 0) {
					continue;
				}else {
				
					map.put(vo, list);
				}
				
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
			
			
		}
		
		topList.add(map);

		
		return topList;
	}
	
	//=======================신청 취소
	public  void cancelSitterRequest(int no) {
		
		sitterBoard_ProcessSQLMapper.cancelSitterRequest(no);
	}
	
	
	
	
	//========================================================================마이페이지에서 시터게시판 볼때(수락)================================================================
	
	public  ArrayList<HashMap<HE_SitterBoardVo, ArrayList<HE_SitterBoard_ProcessVo>>> sitterAcceptListPage(HE_MemberVo vo){
		
		
		ArrayList<HashMap<HE_SitterBoardVo, ArrayList<HE_SitterBoard_ProcessVo>>> topList = new ArrayList<HashMap<HE_SitterBoardVo, ArrayList<HE_SitterBoard_ProcessVo>>>();
		
		
		HashMap<HE_SitterBoardVo,ArrayList<HE_SitterBoard_ProcessVo>> map = new HashMap<HE_SitterBoardVo, ArrayList<HE_SitterBoard_ProcessVo>>();
		
		
		ArrayList<HE_SitterBoardVo> mySitterList = sitterBoard_ProcessSQLMapper.getMySitterBoardList(vo);
		
		
		for(HE_SitterBoardVo sitterVo : mySitterList) {
			
			
			try {
				
				ArrayList<HE_SitterBoard_ProcessVo> mySitterAcceptList = sitterBoard_ProcessSQLMapper.sitterAcceptListPage(sitterVo);
				
				if(mySitterAcceptList.size() == 0) {
					continue;
				}else {
				
					map.put(sitterVo, mySitterAcceptList);
				}
				
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
			
			
		}
		topList.add(map);

		
		return topList;
	}
	
	
	//=======================수락 거절
	public  void cancelSitterAccept(int no) {
		
		sitterBoard_ProcessSQLMapper.cancelSitterAccept(no);
	}
	
	
	//========================================================================수락버튼 클릭 시, status 변경 ========================================================================
	//=======================1. finddogBoard에 글 올린 사람이 여러 시터에게 신청한 경우, 해당 수락한 시터 제외하고 거절상태로 변경
	public void change_Status(HE_SitterBoard_ProcessVo vo) {
		sitterBoard_ProcessSQLMapper.change_StatusYes_Accept(vo);
		sitterBoard_ProcessSQLMapper.change_StatusNo_RequestAll(vo);
	}
	
	//=======================2. sitterboard에 글 올린 시터인 사람이 여러 사람으로부터 신청받은 경우, 해당 수락한 글 제외하고 거절상태로 변경
	public void change_StatusNo_AcceptAll(HE_MemberVo memberVo, HE_SitterBoard_ProcessVo sitterProcessVo) {
		
		//본인이 시터 요청 받은 모든 글 
		ArrayList<HE_SitterBoardVo> sitterList = sitterBoard_ProcessSQLMapper.getMySitterBoardList(memberVo);
		
		//시터 요청을 수락한 글의 no  
		int thisSitterboard_no = sitterProcessVo.getSitterboard_no();
		
		//루프 돌면서, 자신이 요청 받은 글의 no 와 방금 수락한 글 no가 같지않을 때, status = 'N'으로 바꿔주기
		for(HE_SitterBoardVo vo : sitterList) {
			
			int sitterboard_no = vo.getSitterboard_no();
			
			if(sitterboard_no != thisSitterboard_no) {
				sitterBoard_ProcessSQLMapper.change_StatusNo_AcceptAll(sitterboard_no);
			}
			
			
		}
		
	}
}
